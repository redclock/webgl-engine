attribute highp vec3 aPosition;
attribute mediump vec3 aNormal;
attribute mediump vec2 aTexcoord;
attribute mediump vec4 aTangent;

uniform highp mat4 matWorld;
uniform highp mat4 matViewProj;
uniform highp mat4 matViewProjReflect;
uniform highp vec3 eyePos;

varying mediump vec2 vTexcoord;
varying mediump vec3 vCameraDir;
varying mediump vec3 vLightDir;
varying mediump vec4 vReflectTexcoord;
varying mediump vec4 vRefractTexcoord;

void main(void)
{
    highp vec4 pos = vec4(aPosition, 1.0);
    mediump vec4 normal = vec4(aNormal, 0.0);
    mediump vec4 tangent = vec4(aTangent.xyz, 0.0);

    vec4 worldPos = matWorld * pos;
    gl_Position = matViewProj * worldPos;

    vec3 worldNormal = (matWorld * normal).xyz;
    vec3 worldTangent = (matWorld * tangent).xyz;
    vec3 worldBinormal = cross(worldNormal, worldTangent) * aTangent.w;
    mat3 tangentMat = mat3(worldTangent, worldBinormal, worldNormal);
    vec3 cameraDir = normalize(eyePos - worldPos.xyz);
    vCameraDir = tangentMat * cameraDir;
    vLightDir = tangentMat * vec3(1.0, 0.5, 0.0);


    vTexcoord = aTexcoord;
    vReflectTexcoord = matViewProjReflect * worldPos;
    vRefractTexcoord = gl_Position;
}